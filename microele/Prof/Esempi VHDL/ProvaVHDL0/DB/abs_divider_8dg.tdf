--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=0 MAXIMIZE_SPEED=9 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=32 WIDTH_N=32 denominator numerator quotient remainder
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_abs 2006:01:02:19:20:00:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_divide 2006:01:18:17:01:10:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ cbx_util_mgl 2006:01:09:10:46:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION alt_u_div_cte (denominator[31..0], numerator[31..0])
RETURNS ( den_out[31..0], quotient[31..0], remainder[31..0]);
FUNCTION lpm_abs_kj9 (data[31..0])
RETURNS ( overflow, result[31..0]);
FUNCTION add_sub_k5f (cin, dataa[31..0], datab[31..0])
RETURNS ( result[31..0]);

--synthesis_resources = lut 591 
SUBDESIGN abs_divider_8dg
( 
	denominator[31..0]	:	input;
	numerator[31..0]	:	input;
	quotient[31..0]	:	output;
	remainder[31..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_cte;
	my_abs_den : lpm_abs_kj9;
	my_abs_num : lpm_abs_kj9;
	compl_add_quot : add_sub_k5f;
	compl_add_rem : add_sub_k5f;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[31..0]	: WIRE;
	neg_rem[31..0]	: WIRE;
	norm_den[31..0]	: WIRE;
	norm_num[31..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[31..0]	: WIRE;
	protect_remainder[31..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot.cin = vcc_wire;
	compl_add_quot.dataa[] = (! protect_quotient[]);
	compl_add_quot.datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem.cin = vcc_wire;
	compl_add_rem.dataa[] = (! protect_remainder[]);
	compl_add_rem.datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	diff_signs = (numerator[31..31] $ denominator[31..31]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot.result[];
	neg_rem[] = compl_add_rem.result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[31..31];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! diff_signs)) # (neg_quot[] & diff_signs));
	remainder[] = ((protect_remainder[] & (! num_sign)) # (neg_rem[] & num_sign));
	vcc_wire = B"1";
END;
--VALID FILE
